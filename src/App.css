@import '~@fontsource/rubik/index.css';
@import '~@fontsource/cabin/index.css';
/*
  Subset of font https://github.com/googlefonts/noto-emoji
  which includes only flags emoji generated using command:
  $ fonttools subset NotoColorEmoji.ttf --ignore-missing-glyphs --text-file=data.txt
  where data.txt is a text file containing all the glyphs you want to include
*/
@font-face {
  font-family: 'Noto Color Emoji';
  src: url('./assets/NotoColorEmoji.subset.ttf');
}

* {
  box-sizing: border-box;
  /* Measurements */
}

@media screen and (max-width: 730px) {
  * {
    --sidebar-width: calc(var(--sidebar-width) - 1em);
  }
}

body,
html,
#root,
.App {
  height: 100%;
  overflow: hidden;
}

.App {
  --content-font-family: 'Cabin', sans-serif;
  --actions-font-family: 'Rubik', sans-serif;
  text-align: center;
  color: var(--text-default);
  display: grid;
  grid-template-columns: var(--sidebar-width) 1fr;
  grid-template-areas: 'offline offline' 'sidebar content' 'controller controller';
  grid-template-rows: min-content 1fr min-content;
  font-family: var(--content-font-family);
  background: var(--body-background);
  --sidebar-width: 240px;
  --content-width: calc(100vw - var(--sidebar-width));
}

.App.collapsed {
  --sidebar-width: 68px;
  --content-width: calc(100vw - var(--sidebar-width));
  grid-template-columns: var(--sidebar-width) 1fr;
}

.App .Sidebar {
  grid-area: sidebar;
}

.App .content {
  grid-area: content;
  display: flex;
  flex-direction: column;
  height: 100%;
  overflow-y: auto;
  overflow-x: hidden;
  background: var(--gradient-body-background);
}

.App .content .UpdateComponent--topLevel {
  height: 100vh;
  position: initial;
  width: var(--content-width);
}

.App .content .UpdateComponent--topLevel.collapsed {
  width: var(--content-width);
}

.App .offline-message {
  grid-area: offline;
}

.App .controller {
  grid-area: controller;
  position: relative;
}

.danger {
  font-weight: 700;
  color: var(--danger);
}

.button {
  --line-height: 17px;
  cursor: pointer;
  padding: 0.75rem;
  background: var(--primary);
  color: #1a1b1c;
  text-transform: uppercase;
  font-family: var(--actions-font-family);
  font-style: normal;
  font-weight: 500;
  font-size: 14px;
  line-height: var(--line-height);
  color: #161616;
  border: none;
  max-height: 40px;
  text-align: center;
  transition: 500ms;
  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
}

.button:disabled {
  cursor: not-allowed;
}

.button.is-small {
  min-width: 130px;
}

.button:hover {
  background: #58545d;
}

.button.is-primary {
  background: var(--primary);
}

.button.is-primary:hover {
  background: var(--primary-hover);
}

.button.is-primary:disabled {
  color: var(--text-secondary);
  background: var(--background-secondary);
  pointer-events: none;
}

.button.is-secondary {
  background: var(--accent);
  color: var(--text-tertiary);
}

.button:disabled.is-secondary,
.button:disabled:hover.is-secondary {
  background-color: var(--background-secondary);
  color: var(--text-secondary);
}

.button.is-tertiary {
  background: var(--body-background);
  color: var(--text-default);
}

.button.is-tools:hover,
.button.is-tools:focus-visible {
  background-color: var(--stop-button);
}
.button.is-tools:hover .toolTitle,
.button.is-tools:focus-visible .toolTitle {
  transition: 500ms;
  color: var(--text-hover);
}

.button.is-secondary:hover {
  background: var(--accent-overlay);
}

.button.is-empty {
  background: transparent;
  text-decoration: underline;
}

.button.is-danger {
  background: var(--input-background);
  color: var(--danger-hover);
}

.button.is-danger:hover,
.button.is-danger:focus-visible {
  background: var(--danger);
  color: var(--text-secondary);
}

.button.is-success {
  background: var(--success);
}

.button.is-success:hover {
  background: var(--success-hover);
}

.button.is-success:hover:disabled,
.button.is-success:disabled {
  background: var(--background);
  color: var(--text-default);
}

.button.outline {
  background: transparent;
  color: var(--accent);
  border: 2px solid;
}

.button.outline:hover:disabled,
.button.outline:disabled {
  background-color: var(--background-secondary);
  color: var(--text-secondary);
  border: none;
}

.button:hover.outline,
.button.outline.active {
  background: transparent;
  color: var(--accent-overlay) !important;
  border: 2px solid;
}

.material-icons.is-primary {
  /* I can't find any elements that use this, so idk what colour this should be */
  color: var(--danger);
}

.material-icons.is-secondary {
  color: var(--download-button);
}

.material-icons.is-success {
  color: var(--success);
}

.material-icons.is-danger {
  color: var(--danger);
}

.material-icons.is-danger:hover {
  color: var(--danger-hover);
}

.material-icons.settings.folder {
  cursor: pointer;
  color: var(--text-default);
}

.button.settings {
  background: var(--text-secondary);
}

.button.settings:hover {
  background: #7c7c7c;
}

.button.settings:disabled:hover,
.button.settings:disabled {
  background: #7c7c7c;
}

.button.is-text {
  border: none;
  border-radius: 0;
  background: transparent;
  color: var(--text-default);
  box-shadow: none;
  text-transform: none;
  min-width: fit-content;
  font-family: var(--content-font-family);
  font-size: 14px;
}

.button.is-text:hover {
  color: var(--text-hover);
}

.button.is-link {
  font-family: var(--actions-font-family);
  font-style: normal;
  font-weight: normal;
  font-size: 14px;
  line-height: 17px;
  color: var(--accent);
  margin: 4px 0px;
  cursor: pointer;
  padding: 0.25rem;
}

.button.is-link:hover {
  color: var(--text-hover);
}

.button.is-link[disabled] {
  color: var(--icon-disabled);
  cursor: wait;
}

.icons > * {
  cursor: pointer;
}

.smallMessage {
  font-size: 12px;
  width: 100%;
  max-width: 513px;
  white-space: break-spaces;
  padding-top: 4px;
}

svg.disabled {
  color: var(--background);
}

.react-contextmenu--visible {
  background-color: var(--input-background);
  padding: 14px 22px;
  border-radius: 6px;
  z-index: 99;
}

.react-contextmenu-item {
  color: var(--text-default);
  font-size: 14px;
  line-height: 26px;
  font-family: var(--actions-font-family);
  cursor: pointer;
  text-align: left;
}

.react-contextmenu-item:hover {
  color: var(--download-button);
}

.react-contextmenu-item.disabled {
  color: var(--icon-disabled);
  cursor: initial;
}

.isRTL {
  direction: rtl;
}
